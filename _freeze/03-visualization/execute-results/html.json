{
  "hash": "1630ece6560b57fd13ce962c518d25a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Visualization and Descriptive Stats\"\nauthor: \"Bella Ratmelia\"\nformat: revealjs\n---\n\n\n\n## Today's Outline\n\n1.  Descriptive Statistics\n2.  Data Visualization in ggplot using World Values Survey data, including guidelines on how to choose the appropriate visualization.\n\n## Checklist when you start RStudio\n\n-   Load the project we created last session and open the R script file.\n-   Make sure that `Environment` panel is empty (click on broom icon to clean it up)\n-   Clear the `Console` and `Plots` too.\n-   Re-run the `library(tidyverse)` and `read_csv` portion in the previous session\n\n## Refresher: Loading from CSV into a dataframe\n\nUse `read_csv` from `readr` package (part of `tidyverse`) to load our data into a dataframe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import tidyverse library\nlibrary(tidyverse)\n\n# read the CSV with WVS data\nwvs_cleaned <- read_csv(\"data-output/wvs_cleaned_v1.csv\")\n\n# Convert categorical variables to factors\ncolumns_to_convert <- c(\"country\", \"religiousity\", \"sex\", \"marital_status\", \"employment\")\n\nwvs_cleaned <- wvs_cleaned |> \n    mutate(across(all_of(columns_to_convert), as_factor))\n\n# peek at the data, pay attention to the data types!\nglimpse(wvs_cleaned)\n```\n:::\n\n\n\n## Recap: Descriptive Statistics\n\n::: incremental\n-   Univariate (i.e. single variable) Descriptive Stats\n\n    -   Measures of central tendency: `mean()`, `median()`, `Mode()`\n    -   Measures of Variability: `min()`, `max()`, `range()`, `IQR()`, `sd()` (standard deviation), `var()` (variance)\n    -   Distribution shape: `skewness()` and `kurtosis()` from `moments` library. This is easier to see with histogram\n\n-   Bivariate (i.e. two variables) Descriptive Stats\n\n    -   Contingency table / cross tab (for categorical data)\n    -   Covariance - describe how two variables vary together\n    -   Correlation - describe relationship strength and direction **in a sample**. (If we want to use this to infer about a population from a sample, it would fall under inferential stats)\n    -   Visualizations e.g. Scatterplots, side-by-side boxplots, stacked bar charts, etc.\n:::\n\n## From last week: Basic R Functions for Descriptive Stats\n\nLast week, we explored some basic R functions for descriptive statistics.\n\n-   `mean()`: arithmetic average\n-   `median()`: middle value\n-   `sd()`: standard deviation\n-   `var()`: variance\n-   `range()`: range of values\n-   `IQR()`: interquartile range\n-   `summary()`: provides a summary of descriptive statistics\n-   `Mode()` function from `DescTools` package: the most frequently occuring value [^1]\n\n[^1]: R doesn't have built-in functions for mode, so we need `DescTools` package to get this function\n\n# Univariate Descriptive Stats\n\n## Measures of Central Tendency\n\nLet's start by examining the `age` variable in our dataset.\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(DescTools)\n\n# Basic statistics\nmean_age <- mean(wvs_cleaned$age, na.rm = TRUE)\nmedian_age <- median(wvs_cleaned$age, na.rm = TRUE)\nmode_age <- DescTools::Mode(wvs_cleaned$age, na.rm = TRUE)\n\n# Print results\ncat(\"Mean age:\", mean_age, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMean age: 47.96408 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Median age:\", median_age, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMedian age: 48 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Most frequently occuring age:\", mode_age, \"\\n\") # this is here just for demo purposes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMost frequently occuring age: 54 \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nHow we can interpret / report this:\n\n*\"The age distribution of this sample is fairly symmetrical, as indicated by the very close mean (48 years) and median (48 years) values. The mode of 54 years suggests a slight right-skew in the age distribution, with a cluster of participants in their mid-50s.\"*\n\n## Measures of Variability or Dispersion\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nvar_age <- var(wvs_cleaned$age, na.rm = TRUE)\nsd_age <- sd(wvs_cleaned$age, na.rm = TRUE)\nrange_age <- range(wvs_cleaned$age, na.rm = TRUE)\niqr_age <- IQR(wvs_cleaned$age, na.rm = TRUE)\n\ncat(\"Variance of age:\", var_age, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVariance of age: 279.6066 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Standard deviation of age:\", sd_age, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStandard deviation of age: 16.72144 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Range of age:\", range_age[1], \"to\", range_age[2], \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRange of age: 18 to 93 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Interquartile range of age:\", iqr_age, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInterquartile range of age: 28 \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nHow we can interpret / report this:\n\n*\"The age distribution of this sample is fairly wide spread. With a standard deviation of 16.72144, suggesting that most individuals' ages deviate from the mean by approximately 16.72 years. The range of ages spans from 18 to 93 years, which covers a wide range of age groups within the sample. The interquartile range (IQR) of 28 years, which represents the middle 50% of the data, indicates a moderately wide distribution of ages in the central portion of the dataset.\"*\n\n## Distribution Shape\n\nThe function `skewness()` and `kurtosis()` is available through R package called `moments`. You may need to install it first before calling the library and its functions like in this code below.\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(moments)\n\nskew_age <- skewness(wvs_cleaned$age, na.rm = TRUE)\nkurtosis_age <- kurtosis(wvs_cleaned$age, na.rm = TRUE)\n\ncat(\"Skewness of age:\", skew_age, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSkewness of age: 0.1009475 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Kurtosis of age:\", kurtosis_age, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKurtosis of age: 2.018238 \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nHow we can interpret / report this:\n\n*\"The age distribution has a very slight right skew (skewness = 0.10), meaning there are slightly more outliers toward older ages, but the skew is minimal since values between -0.5 and 0.5 are considered approximately symmetric. The kurtosis of 2.02 is lower than a normal distribution's kurtosis of 3, indicating this distribution is platykurtic - it has lighter tails and is more uniform or \"flatter\" than a normal distribution.\"*\n\n## Visualizing with ggplot\n\n-   Describing the spread and shape of distribution with just words is not very productive, so typically it is accompanied with visualization.\n\n-   `ggplot` is plotting package that is included inside `tidyverse` package\n\n-   works best with data in the long format, i.e., a column for all the dimensions/measures and another column for the value for each dimension/measure.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> \n    ggplot(aes(x = age)) +\n    geom_histogram(binwidth = 1, fill = \"lightblue\", color = \"navy\") +\n    labs(title = \"Age distribution of respondents\",\n         x = \"Age\",\n         y = \"Count\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-5-1.png){width=1344}\n:::\n:::\n\n\n\n## Anatomy of ggplot code\n\nCharts built with ggplot must include the following:\n\n``` {.r code-line-numbers=\"|1|2|3|4-6|7\"}\nwvs_cleaned |> # <1>\n    ggplot(aes(x = age)) + # <2>\n    geom_histogram(binwidth = 1, fill = \"lightblue\", color = \"navy\") + # <3>\n    labs(title = \"Age distribution of respondents\", # <4>\n         x = \"Age\", # <4>\n         y = \"Count\") + # <4>\n    theme_minimal() # <5>\n```\n\n1.  **Data** - the dataframe/tibble to visualize.\n\n2.  **Aesthetic mappings (aes)** - describes which variables are mapped to the x, y axes, alpha (transparency) and other visual aesthetics.\n\n3.  **Geometric objects (geom)** - describes how values are rendered; as bars, scatterplot, lines, etc.\n\n4.  Provide titles and labels to your graph\n\n5.  (Optional) apply a theme/look to your graph\n\n## Tip: open the ggplot cheatsheet\n\n::: callout-tip\n**A strategy I'd like to recommend:** briefly read over the `ggplot2` documentation and have them open on a separate tab. Figure out the type of variables you need to visualize (discrete or continuous) to quickly identify which visualization would make sense.\n:::\n\n![](images/ggplot-cheatsheet.jpg){width=\"60%\"}\n\n[ggplot documentation link](https://rstudio.github.io/cheatsheets/html/data-visualization.html)\n\n## Going back to our univariate descriptive stats on `age` variable\n\nLet's visualize the variability with boxplot to get a better sense of the spread.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> \n    ggplot(aes(x = age)) +\n    geom_boxplot(fill = \"lightblue\", color = \"navy\") +\n    labs(title = \"Age distribution of respondents\",\n         x = \"Age\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-6-1.png){width=1344}\n:::\n:::\n\n\n\n## Categorical Data - Frequency Distribution\n\n-   The `age` variable is a numerical / continuous data. We can't apply `mean()`, `median()` and other central tendency measures to categorical data such as `age_group` or `employment_status`. We can, however, visualize them.\n\n-   When dealing with categorical data, first take note on whether you want to visualize the **proportion** or the **frequency distribution**. \n\n-   Let's visualize the frequency distribution of survey participants by `country`:\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> ggplot(aes(x = country, fill = country)) +\n    geom_bar() +\n    labs(title = \"Participants by Country\",\n       x = \"Country\",\n       y = \"Participants\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-7-1.png){width=1344}\n:::\n:::\n\n\n\n## Categorical Data - Proportion\n\nWhen we want to show proportion (i.e. in terms of \"parts of whole\"), we must first quickly calculate the proportion with `count()`\n\nLet's create a new dataframe called `wvs_country_proportion` to hold this data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_country_proportion <- wvs_cleaned |> \n    group_by(country) |>\n    summarize(n = n()) |> # count the number of participants each country\n    mutate(proportion = n/sum(n)) # calculate proportion\n\nprint(wvs_country_proportion)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  country     n proportion\n  <fct>   <int>      <dbl>\n1 CAN      4018      0.628\n2 NZL       660      0.103\n3 SGP      1725      0.269\n```\n\n\n:::\n:::\n\n\n\n## Categorical Data - Proportion (cont'd)\n\nAnd then, we use this proportion table to create a pie chart by adding `coord_polar()` layer after `geom_bar()` and some changes in `aes()` and `geom_bar()`\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_country_proportion |> ggplot(aes(x = \"\", y = proportion, fill = country)) +\n    geom_bar(stat = \"identity\", width = 1) +\n    coord_polar(\"y\", start = 0) +\n    labs(title = \"Proportion of Participants by Country\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-9-1.png){width=1344}\n:::\n:::\n\n\n\n::: aside\nNote: if you have lots of categories, pie chart is not always the best option. The code for this pie chart is from [R Graph Gallery](https://r-graph-gallery.com/piechart-ggplot2.html)\n:::\n\n## Learning Check 1A \n\nUsing the `wvs_cleaned` dataset:\n\nCreate a histogram that visualizes the distribution of `financial_satisfaction`\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show answer\"}\nwvs_cleaned |> ggplot(aes(x = financial_satisfaction)) +\n  geom_histogram(fill = \"steelblue\", color = \"white\", binwidth = 1) +\n  labs(title = \"Distribution of Financial Satisfaction\",\n       x = \"Financial Satisfaction\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-10-1.png){width=1344}\n:::\n:::\n\n\n## Learning Check 1B\n\nCreate a barchart that visualizes the frequency of `religiousity`\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show answer\"}\nwvs_cleaned |> ggplot(aes(x = religiousity, fill = religiousity)) +\n  geom_bar() +\n  labs(title = \"Frequency of Religiosity\",\n       x = \"Religiosity\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-11-1.png){width=1344}\n:::\n:::\n\n\n\n# Bivariate Descriptive Stats\n\n## Three Combinations in Bivariate Descriptive Stats\n\nBivariate descriptive statistics describe and summarize relationships between two variables in your dataset **without making inferences about a larger population**. They include numeric measures like correlation or covariance, and visualizations like scatterplots, side-by-side boxplots, or contingency tables.\n\nThink of them as taking a snapshot of how two variables relate to each other in your current data.\n\nSince data can be continuous or categorical, there can be three combinations when we deal with bivariate descriptive stats:\n\n1.  Both categorical (e.g. `age_group` and `country`)\n2.  Both continuous (e.g. `financial_satisfaction` and `life_satisfaction`)\n3.  One continuous, one categorical (e.g. `country` and `life_satisfaction`)\n\n## Both categorical\n\n-   Examine relationships between categorical variables\n\n-   Look at joint distributions and proportions\n\n-   Compare group compositions\n\nFirst, let's create a contingency table of `age_group` and `country`!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(wvs_cleaned$age_group, wvs_cleaned$country)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n         CAN  NZL  SGP\n  18-28  712   27  246\n  29-44 1232  119  511\n  45-60 1061  222  550\n  61+   1013  292  418\n```\n\n\n:::\n:::\n\n\n\n## Both categorical (cont'd)\nWe can also create a proportion table just like we did earlier\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_cleaned |> \n  group_by(country, age_group) |> \n  summarise(n = n()) |> # count the frequency of participants by age group and country \n  mutate(prop = n/sum(n)) # calculate proportion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n# Groups:   country [3]\n   country age_group     n   prop\n   <fct>   <chr>     <int>  <dbl>\n 1 CAN     18-28       712 0.177 \n 2 CAN     29-44      1232 0.307 \n 3 CAN     45-60      1061 0.264 \n 4 CAN     61+        1013 0.252 \n 5 NZL     18-28        27 0.0409\n 6 NZL     29-44       119 0.180 \n 7 NZL     45-60       222 0.336 \n 8 NZL     61+         292 0.442 \n 9 SGP     18-28       246 0.143 \n10 SGP     29-44       511 0.296 \n11 SGP     45-60       550 0.319 \n12 SGP     61+         418 0.242 \n```\n\n\n:::\n:::\n\n\n\n## Both categorical (cont'd)\n\nFor categorical data like this, we can use barchart to visualize the frequency distribution. Stacked bar chart can be used to visualize proportion.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> ggplot(aes(x = country, fill = age_group)) +\n  geom_bar(position = \"dodge\") + \n  labs(y = \"Count\", title = \"Age Groups by Country\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-14-1.png){width=1344}\n:::\n:::\n\n\n\nChange `position = \"dodge\"` to `position = \"stack\"` to stack the bar chart\n\n## Both categorical (cont'd)\n\nTo get a better sense of the proportion for each country, we can use percent stacked bar chart.\n\nThe code is similar to previous bar charts; we just have to change the `position` argument to `position = \"fill\"`\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> ggplot(aes(x = country, fill = age_group)) +\n  geom_bar(position = \"fill\") + \n  labs(y = \"Proportion\", title = \"Age Groups by Country\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-15-1.png){width=1344}\n:::\n:::\n\n\n\n## Both continuous\n\n-   Examine linear relationships\n\n-   Look for patterns and trends\n\n-   Identify potential outliers\n\nLet's first examine the correlation between `financial_satisfaction` and `life_satisfaction`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(wvs_cleaned$financial_satisfaction, wvs_cleaned$life_satisfaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6420311\n```\n\n\n:::\n:::\n\n\n## Both continuous (cont'd)\n\nLet's visualize the two variables together with a jitter / scatterplot!\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> ggplot(aes(x = financial_satisfaction, y = life_satisfaction)) +\n  geom_jitter(alpha = 0.3) +\n  geom_smooth(method = \"lm\") + # layer with geom_smooth\n  labs(title = \"Financial vs Life Satisfaction\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-17-1.png){width=1344}\n:::\n:::\n\n\n\n## One continuous, one categorical\n\n-   Compare distributions across groups\n\n-   Identify group differences\n\n-   Examine spread within groups\n\nLet's do a recap from last week and get the summary stats for `life_satisfaction` for each `country`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_cleaned |> \n  group_by(country) |> \n  summarise(\n    mean_satisfaction = mean(life_satisfaction, na.rm = TRUE),\n    median_satisfaction = median(life_satisfaction, na.rm = TRUE),\n    sd_satisfaction = sd(life_satisfaction, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  country mean_satisfaction median_satisfaction sd_satisfaction\n  <fct>               <dbl>               <dbl>           <dbl>\n1 CAN                  7.04                   7            1.81\n2 NZL                  7.60                   8            1.79\n3 SGP                  7.06                   7            1.78\n```\n\n\n:::\n:::\n\n\n\n## One continuous, one categorical (cont'd)\n\nTo get a better sense of how the data is varied and spread, let's visualize them with a side-by-side boxplot\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> ggplot(aes(x = country, y = life_satisfaction)) +\n  geom_boxplot() +\n  labs(title = \"Life Satisfaction by Country\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-19-1.png){width=1344}\n:::\n:::\n\n\n\n## One continuous, one categorical (cont'd)\n\nWe could also layer our boxplots with violin plots to get a better sense of the distribution of each group. \n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> ggplot(aes(x = country, y = life_satisfaction)) +\n  geom_violin(fill = \"lightblue\", alpha = 0.5) +\n  geom_boxplot(width = 0.1, fill = \"white\") +\n  labs(title = \"Life Satisfaction Distribution by Country\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-20-1.png){width=1344}\n:::\n:::\n\n\n\n## Learning Check #2\n\nCreate a side-by-side boxplots that visualizes `political_scale` for each `sex`.\n\n\n\n::: {.cell output-location='true'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show answer\"}\nwvs_cleaned |> ggplot(aes(x = political_scale, y = sex)) +\n  geom_violin(fill = \"lightblue\", alpha = 0.5) +\n  geom_boxplot(width = 0.1, fill = \"white\") +\n  labs(title = \"Political scale Distribution by Sex\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-21-1.png){width=1344}\n:::\n:::\n\n\n\n## Using Facets for more complex visual\n\n-   Compare patterns across multiple subgroups\n\n-   Identify interaction effects\n\n-   Maintain visual clarity with complex relationships\n\nFacet grids are useful when we have more than two variables to visualize. However, if used excessively they may become too complex\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_cleaned |> ggplot(aes(x = financial_satisfaction, y = life_satisfaction)) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\") +\n  facet_grid(country ~ religiousity)\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-revealjs/unnamed-chunk-22-1.png){width=1344}\n:::\n:::\n\n\n\n## Is fancier = better?\n\nFancier, more complicated visualization does not necessarily mean better!\n\nTake a look at this award-winning visualization by [Simon Scarr](http://www.simonscarr.com/iraqs-bloody-toll)\n\n![](https://images.squarespace-cdn.com/content/v1/54b5070de4b01c9a0176b5fd/1428238676197-BAJMDLGPHID08CCOHVDN/image-asset.png?format=1000w)\n\n\n# End of Session 3!\n\nRemember the strategy:\n\n1.  Have the ggplot documentation/cheatsheet open\n2.  Decide on how many variables are involved. Is it just one? two? more than two?\n3.  Determine whether the variables are categorical or continuous. If you have more than one, are they both categorical? one categorical + one continuous?\n4.  Refer to the documentation to see which type of visualization would make sense for your variables.\n\nCheck out the [R Graph gallery](https://r-graph-gallery.com/) for inspiration and code samples!\n\nNext session: inferential stats in R using WVS data\n",
    "supporting": [
      "03-visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}