{
  "hash": "7c5af09452a4bc680f4c222060172cc1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Wrangling with Tidyverse\"\nauthor: \"Bella Ratmelia\"\nformat: revealjs\n---\n\n\n\n## Today's Outline\n\n1.  Loading our data into RStudio environment\n2.  Data wrangling with `dplyr` and `tidyr` (part of the `tidyverse` package)\n\n## Checklist when you start RStudio\n\n-   Load the project we created last session and open the R script file.\n-   Make sure that `Environment` panel is empty (click on broom icon to clean it up)\n-   Clear the `Console` and `Plots` too.\n-   Re-run the `library(tidyverse)` and `read_csv` portion in the previous session\n\n## Refresher: Loading from CSV into a dataframe\n\nUse `read_csv` from `readr` package (part of `tidyverse`) to load our World Values Survey data. More information about the data can be found under the `Dataset` tab in the course website.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import tidyverse library\nlibrary(tidyverse)\n\n# read the CSV and save into a dataframe called wvs_data\nwvs_data <- read_csv(\"data/wvs-wave7-sg-ca-nz.csv\")\n\n# \"peek\" at the data, pay attention to the data types!\nglimpse(wvs_data)\n```\n:::\n\n\n\n## Cleaning data for analysis\n\n::: incremental\n-   **Why do it in R?** Because it's much efficient to do so in R, especially if your data is large (e.g. millions of rows, hundreds of columns) and you have repetitive clean up tasks.\n-   Incorrect or inconsistent data can lead to false conclusions, so it's important to clean and prep it correctly.\n-   Having a clear understanding of the desired data shape is essential as real data often differs from what you imagine! **Refer to codebook, actual questionnaire, appendix for guidance.**\n-   Data cleaning techniques differ based on the problems, data type, and the research questions you are trying to answer. Various methods are available, each with its own trade-offs.\n:::\n\n## About dplyr and tidyr\n\n-   Packages from `tidyverse`. ([click here to go to the tidyverse homepage](https://www.tidyverse.org/))\n\n-   Posit have created cheatsheets here! (you can have this open in another tab for reference for this session!)\n\n    -   [dplyr cheatsheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html) \\| [pdf version](https://rstudio.github.io/cheatsheets/data-transformation.pdf) (I personally prefer this PDF version since it's more visual)\n\n    -   [tidyr cheatsheet](https://rstudio.github.io/cheatsheets/html/tidyr.html) \\| [pdf version](https://rstudio.github.io/cheatsheets/tidyr.pdf)\n\n\n## Prelim checks for your data\n\nIt's good practice to do some preliminary checks on your data to get a better sense of it!\n\nA few things that you can do:\n\n-   Check for duplicates\n\n-   Check for missing values\n\n-   Check on overall distributions of the categorical data\n\n-   Plot the distribution of the numerical/continuous data\n\n# Data wrangling activities with WVS data\n\n**Scenario**: We are research assistants analyzing patterns in values and satisfaction across different countries and demographic groups. Our team wants to understand how life satisfaction relates to various factors like employment, marital status, and religiosity.\n\nTasks we need to complete:\n\n::: incremental\n1. Remove all rows with missing values (NA)\n\n2. Create a demographics-only dataset with variables like country, sex, age, marital_status, and employment\n\n3. Filter for respondents aged 30 or older, arrange by age (oldest to youngest)\n\n4. Convert categorical variables (country, religiousity, sex, marital_status, employment) to factors\n\n5. Create age groups: \"18-29\", \"30-44\", \"45-59\", \"60+\"\n:::\n\n------------------------------------------------------------------------\n\n::: incremental\n6. Create a new column `high_satisfaction` that is TRUE if life_satisfaction is above the median\n\n7. Reverse code scales for all the `importance` variables so that higher numbers consistently represent higher levels of the measured construct. In other words, 1 = Not at all important and 4 = Very important. \n\n8. Generate summary statistics of life_satisfaction grouped by country and employment status\n\n9. Create a cross-tabulation of religiousity by country\n\n10. Reshape the data to show average satisfaction scores by country and age group\n:::\n\n\n# Let's wrangle our data!\n\n## Task #1\n\n> **A strategy I'd like to recommend:** briefly read over the `dplyr` + `tidyr` documentation, either the PDF or HTML version, and have them open on a separate tab so that you can refer to it quickly.\n\nRemove all rows with empty values (NA)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_data <- wvs_data |> \n  drop_na()\n```\n:::\n\n\n\nThe number of observations after removing NAs:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(wvs_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6403   16\n```\n\n\n:::\n:::\n\n\n\n## Interlude: Pipe Operator ( \\|\\> )\n\n-   The pipe operator (\\|\\>) allows us to chain multiple operations without creating intermediate dataframes.\n\n-   Super handy when we perform several data wrangling tasks using tidyverse in sequence.\n\n-   Helps with readability, especially for complex operations.\n\n-   Keyboard shortcut: `Ctrl`+`Shift`+`M` on Windows, `Cmd`+`Shift`+`M` on Mac\n\n::: panel-tabset\n### Without pipe operator\nNotice that we have to create a \"temp\" dataframes called `age_df` and `age_df_desc` in this method.\n\n``` r\nage_df <- filter(wvs_data, age >= 30)\nage_df_desc <- arrange(age_df, desc(age))\nwrite_csv(age_df_desc, \"data-output/wvs-30plus.csv\")\n```\n\n### With pipe operator\n\nNo \"temp\" dataframe needed here! :D\n\n``` {.r code-overflow=\"overflow\"}\nwvs_data |> \n    filter(age >= 30) |> \n    arrange(desc(age)) |> \n    write_csv(\"data-output/wvs-30plus.csv\")\n```\n:::\n\n## Task #2\n\nCreate a demographics-only dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics_df <- wvs_data |>\n    select(country, sex, age, marital_status, employment) |>\n    write_csv(\"data-output/wvs_demographics.csv\")\n```\n:::\n\n\n\nFirst few rows of the demographics data:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,403 × 5\n  country sex      age marital_status             employment       \n  <chr>   <chr>  <dbl> <chr>                      <chr>            \n1 CAN     Female    76 Separated                  Retired/pensioned\n2 CAN     Male      69 Married                    Retired/pensioned\n3 CAN     Female    35 Living together as married Part time        \n# ℹ 6,400 more rows\n```\n\n\n:::\n:::\n\n\n\n## Task #3: \n\nFilter for 30+ age group and sort by age:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_30plus <- wvs_data |>\n    filter(age >= 30) |>\n    arrange(desc(age)) |>\n    write_csv(\"data-output/wvs_30plus.csv\")\n```\n:::\n\n\n\nPreview of the filtered data:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,319 × 3\n  country   age employment       \n  <chr>   <dbl> <chr>            \n1 CAN        93 Part time        \n2 NZL        91 Retired/pensioned\n3 SGP        90 Retired/pensioned\n# ℹ 5,316 more rows\n```\n\n\n:::\n:::\n\n\n\n## Group Exercise 1 (5 minutes)\n\nFind all respondents who are:\n- From Singapore\n- Employed full-time\n- Have high life satisfaction (8 or higher)\nSave their country, employment, life_satisfaction, and freedom scores, arranged by life_satisfaction in descending order.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show answer\"}\nsingapore_satisfied <- wvs_data |>\n    filter(country == \"SGP\" & \n           employment == \"Full time\" & \n           life_satisfaction >= 8) |>\n    select(country, employment, life_satisfaction, freedom) |>\n    arrange(desc(life_satisfaction))\n```\n:::\n\n\n\nPreview:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 361 × 4\n  country employment life_satisfaction freedom\n  <chr>   <chr>                  <dbl>   <dbl>\n1 SGP     Full time                 10       1\n2 SGP     Full time                 10      10\n3 SGP     Full time                 10      10\n# ℹ 358 more rows\n```\n\n\n:::\n:::\n\n\n\n## Task #4: \n\nConvert categorical variables to factors:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols_to_factor <- c(\"country\", \"religiousity\", \"sex\", \n                    \"marital_status\", \"employment\")\n\nwvs_data <- wvs_data |>\n    mutate(across(all_of(cols_to_factor), as.factor))\n```\n:::\n\n\n\nChecking the structure:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [6,403 × 5] (S3: tbl_df/tbl/data.frame)\n $ country       : Factor w/ 3 levels \"CAN\",\"NZL\",\"SGP\": 1 1 1 1 1 1 1 1 1 1 ...\n $ religiousity  : Factor w/ 4 levels \"A religious person\",..: 1 1 2 1 4 2 2 1 4 1 ...\n $ sex           : Factor w/ 2 levels \"Female\",\"Male\": 1 2 1 2 2 2 2 1 2 2 ...\n $ marital_status: Factor w/ 6 levels \"Divorced\",\"Living together as married\",..: 4 3 2 3 1 3 3 3 6 5 ...\n $ employment    : Factor w/ 8 levels \"Full time\",\"Homemaker not otherwise employed\",..: 5 5 4 1 1 1 6 8 6 1 ...\n```\n\n\n:::\n:::\n\n\n\n## Task #5\n\nAdd age groups to our dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_data <- wvs_data |>\n    mutate(age_group = case_when(\n        age < 30 ~ \"18-29\",\n        age < 45 ~ \"30-44\",\n        age < 60 ~ \"45-59\",\n        TRUE ~ \"60+\"\n    ))\n```\n:::\n\n\n\nPreview of age groups:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,403 × 2\n    age age_group\n  <dbl> <chr>    \n1    76 60+      \n2    69 60+      \n3    35 30-44    \n4    45 45-59    \n# ℹ 6,399 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Task #6\n\nCreate a new column `high_satisfaction` that is TRUE if life_satisfaction is above the median:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate median life satisfaction\nmedian_satisfaction <- median(wvs_data$life_satisfaction, na.rm = TRUE)\n\n# Create the high_satisfaction column\nwvs_data <- wvs_data |>\n    mutate(high_satisfaction = life_satisfaction > median_satisfaction)\n```\n:::\n\n\n\nPreview of satisfaction categorization:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 2\n   life_satisfaction high_satisfaction\n               <dbl> <lgl>            \n 1                 5 FALSE            \n 2                 8 TRUE             \n 3                 9 TRUE             \n 4                 7 FALSE            \n 5                 1 FALSE            \n 6                 7 FALSE            \n 7                 9 TRUE             \n 8                 6 FALSE            \n 9                 7 FALSE            \n10                 6 FALSE            \n11                 7 FALSE            \n```\n\n\n:::\n:::\n\n\n\n## Task #7\n\nIn survey data, we often need to reverse code scales so that higher numbers consistently represent higher levels of the measured construct. In our WVS data:\n\nOriginal importance scale:\n\n- 1 = Very Important\n\n- 2 = Rather Important\n\n- 3 = Not Very Important\n\n- 4 = Not at all Important\n\nLet's create reverse-coded versions where 4 = highest importance:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_data <- wvs_data |>\n    mutate(\n        # Reverse code each importance variable (5 minus original value)\n        family_importance_r = 5 - family_importance,\n        friends_importance_r = 5 - friends_importance,\n        leisure_importance_r = 5 - leisure_importance,\n        work_importance_r = 5 - work_importance\n    )\n```\n:::\n\n\n\n---\n\nPreview of original vs reverse-coded scales:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,403 × 8\n  family_importance family_importance_r friends_importance friends_importance_r\n              <dbl>               <dbl>              <dbl>                <dbl>\n1                 1                   4                  1                    4\n2                 1                   4                  1                    4\n3                 2                   3                  2                    3\n# ℹ 6,400 more rows\n# ℹ 4 more variables: leisure_importance <dbl>, leisure_importance_r <dbl>,\n#   work_importance <dbl>, work_importance_r <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Task #8 \n\nSave all our changes to a new CSV file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the processed data\nwrite_csv(wvs_data, \"data-output/wvs_processed.csv\")\n```\n:::\n\n\n\nLet's check the `data-output` folder to see if the CSV has been properly created!\n\n## Task #9\n\ngenerate satisfaction statistics by country and employment:\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nwvs_data |>\n    group_by(country, employment) |>\n    summarise(\n        n = n(),\n        mean_satisfaction = mean(life_satisfaction),\n        median_satisfaction = median(life_satisfaction),\n        sd_satisfaction = sd(life_satisfaction)\n    ) |>\n    arrange(country, desc(mean_satisfaction))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 6\n# Groups:   country [3]\n   country employment                    n mean_satisfaction median_satisfaction\n   <fct>   <fct>                     <int>             <dbl>               <dbl>\n 1 CAN     Retired/pensioned           914              7.58                 8  \n 2 CAN     Self employed               225              7.32                 8  \n 3 CAN     Full time                  1808              7.10                 7  \n 4 CAN     Homemaker not otherwise …   143              6.96                 7  \n 5 CAN     Part time                   290              6.92                 7  \n 6 CAN     Student                     320              6.53                 7  \n 7 CAN     Other                        78              5.87                 6.5\n 8 CAN     Unemployed                  240              5.53                 6  \n 9 NZL     Self employed                 7              8.71                 9  \n10 NZL     Retired/pensioned           179              8                    8  \n# ℹ 14 more rows\n# ℹ 1 more variable: sd_satisfaction <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Task #10\n\nCreate a country by religiosity cross-tabulation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_data |>\n    group_by(country, religiousity) |>\n    summarise(count = n(), .groups = \"drop\") |>\n    pivot_wider(\n        names_from = religiousity,\n        values_from = count,\n        values_fill = 0\n    ) |>\n    knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|country | A religious person| An atheist| Not a religious person| Don't know|\n|:-------|------------------:|----------:|----------------------:|----------:|\n|CAN     |               1406|        818|                   1794|          0|\n|NZL     |                209|         97|                    310|         44|\n|SGP     |                990|        172|                    563|          0|\n\n\n:::\n:::\n\n\n\n## Long vs Wide Data\n\n::: columns\n::: {.column width=\"50%\"}\n**Long data:**\n\n-   Each row is a unique observation.\n\n-   There is a separate column indicating the variable or type of measurements\n\n-   This format is more \"understandable\" by R, more suitable for visualizations.\n\n:::\n\n::: {.column width=\"50%\"}\n**Wide data:**\n\n-   Each row is a unique observation.\n\n-   Each column is a variable --\\> the more variables you have, the \"wider\" is the data\n\n-   This format is more intuitive for humans!\n:::\n:::\n\n## Long vs Wide Data: Examples\n\n::: columns\n::: {.column width=\"50%\"}\n**Long data:**\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   country religiousity           count\n   <fct>   <fct>                  <int>\n 1 CAN     A religious person      1406\n 2 CAN     An atheist               818\n 3 CAN     Not a religious person  1794\n 4 NZL     A religious person       209\n 5 NZL     An atheist                97\n 6 NZL     Don't know                44\n 7 NZL     Not a religious person   310\n 8 SGP     A religious person       990\n 9 SGP     An atheist               172\n10 SGP     Not a religious person   563\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n**Wide data:**\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  country `A religious person` `An atheist` Not a religious perso…¹ `Don't know`\n  <fct>                  <int>        <int>                   <int>        <int>\n1 CAN                     1406          818                    1794           NA\n2 NZL                      209           97                     310           44\n3 SGP                      990          172                     563           NA\n# ℹ abbreviated name: ¹​`Not a religious person`\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Group exercise 3 (solo attempts ok)\n\n[**Time: 5 minutes**]{.underline}\n\nGenerate a summary stats of `age` grouped by `country` and `sex`. The summary stats should include mean, median, max, min, std, and n (number of observations). It should look something like this:\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show answer\"}\nwvs_data |> \n    group_by(country, sex) |> \n    summarise(observation = n(), \n              mean_age = mean(age, na.rm = TRUE),\n              median_age = median(age, na.rm = TRUE), \n              oldest = max(age, na.rm = TRUE),\n              youngest = min(age, na.rm = TRUE),\n              std_dev = sd(age, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n# Groups:   country [3]\n  country sex    observation mean_age median_age oldest youngest std_dev\n  <fct>   <fct>        <int>    <dbl>      <dbl>  <dbl>    <dbl>   <dbl>\n1 CAN     Female        1959     44.2         42     89       18    17.0\n2 CAN     Male          2059     48.8         49     93       18    16.4\n3 NZL     Female         354     56.6         58     91       19    15.5\n4 NZL     Male           306     57.3         59     88       20    15.4\n5 SGP     Female         919     47.7         47     87       21    15.3\n6 SGP     Male           806     47.9         48     90       21    16.2\n```\n\n\n:::\n:::\n\n\n\n## Bonus: Deleting columns from dataframe\n\nLet's say I have this column called `wrong_column` that I want to remove:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_data <- wvs_data |> mutate(wrong_column = \"random values\")\nwvs_data |> select(country, wrong_column) |> print(n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,403 × 2\n  country wrong_column \n  <fct>   <chr>        \n1 CAN     random values\n2 CAN     random values\n3 CAN     random values\n# ℹ 6,400 more rows\n```\n\n\n:::\n:::\n\n\n\n## Remove the wrong column with subset `-`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_data <- wvs_data |> \n    select(-wrong_column)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,403 × 1\n  country\n  <fct>  \n1 CAN    \n2 CAN    \n3 CAN    \n# ℹ 6,400 more rows\n```\n\n\n:::\n:::\n\n\n\n# End of Session 2!\n\nNext session: Descriptive statistics and data visualization with `ggplot2` package - we'll create visualizations to explore patterns in life satisfaction, values, and demographics across countries!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}