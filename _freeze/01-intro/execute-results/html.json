{
  "hash": "b07e2997e4acef8b95ac75c7e40e1075",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R and RStudio\"\nauthor: \"Bella Ratmelia\"\nformat: revealjs\n---\n\n\n\n\n\n\n# Welcome!\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Preamble\n\n-   About me:\n\n    -   Librarian, Research & Data Services team, SMU Libraries.\n\n    -   Bachelor in Info Tech (IT), MSc in Info Studies.\n\n    -   Have been with SMU since the pandemic era (2021).\n\n-   About this workshop:\n\n    -   Live-coding format; code along with me!\n\n    -   Goal of workshop: to give you enough fundamentals (at least to the point that ChatGPT can't bluff you so easily) and confidence to explore R on your own.\n\n    -   Don't be afraid to ask for help! We are all here to learn.\n\n## What is R? What is R Studio?\n\n**R**: The programming language and the software that interprets the R script\n\n**RStudio:** An IDE (Integrated Development Environment) that we use to interact more easily with R language and scripts.\n\n. . .\n\nYou will need to install **both** for this workshop. Go to <https://posit.co/download/rstudio-desktop> to download and install both if you have not done so.\n\n## 7 Reasons to learn R\n\n1.  R is free, open-source, and cross-platform.\n\n2.  R does not involve lots of pointing and clicking - you don't have to remember a complicated sequence of clicks to re-run your analysis.\n\n3.  R code is great for reproducibility - when someone else (including your future self) can obtain the same results from the same dataset and same analysis.\n\n4.  R is interdisciplinary and extensible\n\n5.  R is scalable and works on data of all shapes and sizes (though admittedly, it is not best at some scenarios and other languages such as python would be preferred.)\n\n6.  R produces high-quality and publication-ready graphics\n\n7.  R has a large and welcoming community - which means there are lots of help available!\n\n## A Tour of RStudio\n\n![R Studio layout](images/rstudio-tour.jpg){fig-align=\"center\"}\n\n## Working Directory\n\n-   Working directory -\\> where R will look for files (scripts, data, etc).\n\n    -   By default, it will be on your Desktop\n\n    -   Best practice is to use **R Project** to organize your files and data into projects.\n\n    -   When using R Project, the working directory = project folder.\n\n## Creating the project for this workshop\n\n1.  Go to `File` \\> `New project`. Choose `New directory`, then `New project`\n\n2.  Enter `intro-r-socsci` as the name for this new folder (or \"directory\") and choose where you want to put this folder, e.g. `Desktop` or `Documents` if you are on Windows. This will be your working directory for the rest of the workshop!\n\n<!-- -->\n\n4.  Next, let's create 3 folders inside our working directory:\n\n    -   `data` - we will save our raw data here. **It's best practice to keep the data here untouched.**\n\n    -   `data-output` - if we need to modify raw data, store the modified version here.\n\n    -   `fig-output` - we will save all the graphics we created here!\n\n::: callout-warning\nDon't put your R projects inside your OneDrive folder as that may cause issues sometimes.\n:::\n\n# Let's Code!\n\nCreate a new R script - `File` \\> `New File` \\> `R script`.\n\n**Note: RStudio does not autosave your progress, so remember to save from time to time!**\n\n## R Objects and Values\n\nIn this line of code:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Anya Forger\"\n```\n:::\n\n\n\n\n\n\n-   `\"Anya Forger\"` is a value. This can be either a character, numeric, or boolean data type. (more on this soon)\n\n-   `name` is the object where we store this value. This is so that we can keep this value to be used later.\n\n-   `<-` is the assignment operator to assign the value to the object.\n\n    -   You can also use `=`, but generally in R, `<-` is the convention.\n\n    -   Keyboard shortcut: `Alt` + `-` in Windows (`Option` + `-` in Mac)\n\n## Refresher: Quantitative Data Types\n\n-   [**Non-Continuous Data**]{.underline}\n\n    -   **Nominal/Categorical**: Non-ordered, non-numerical data, used to represent qualitative attribute.\n\n        -   Example: nationality, neighborhood, employment status\n\n    -   **Ordinal**: Ordered non-numerical data.\n\n        -   Example: Nutri-grade ratings, frequency of exercise (daily, weekly, bi-weekly)\n\n    -   **Discrete**: Numerical data that can only take specific value (usually integers)\n\n        -   Example: Shoe size, clothing size\n\n    -   **Binary**: Nominal data with only two possible outcome\n\n        -   Example: pass/fail, yes/no, survive/not survive\n\n------------------------------------------------------------------------\n\n-   [**Continuous Data**]{.underline}\n\n    -   **Interval**: Numerical data that can take any value within a range. [It does not have a \"true zero\".]{.underline}\n\n        -   Example: Celsius scale. Temperature of 0 C does not represent absence of heat.\n\n    -   **Ratio**: Numerical data that can take any value within a range. [it has a \"true zero\".]{.underline}\n\n        -   Example: Annual income. annual income of 0 represents no income.\n\n## Data Types in R\n\nThe four basic data types are characters, numeric, boolean, and integer.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4\"}\nchara_type <- \"Hello World\" # Character\nnum_type <- 123.45 # Numeric (also sometimes called Double)\nbool_type <- TRUE # Boolean/Logical (true/false)\nint_type <- 25L # Integer (whole numbers)\n```\n:::\n\n\n\n\n\n\n## Checking data type of a variable\n\nYou can use `str` or `typeof` to check the data type of an R object.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(chara_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(bool_type) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n logi TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Arithmetic operations in R\n\nYou can do arithmetic operations in R, like so:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n100 / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33.33333\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n11 ** 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 121\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Boolean operations in R\n\nBoolean operations in R (will be handy for later):\n\n**AND** operations (all sides needs to be TRUE for the result to be TRUE)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE & FALSE \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**OR** operations (only one side needs to be TRUE for the result to be TRUE)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE | FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**NOT** operations, which is basically flipping TRUE to FALSE and vice versa\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Functions in R\n\nFunctions is a block of reusable code designed to do specific task. Function take inputs (a.k.a arguments or parameters), do their thing, and then return a result. (this result can either be printed out, or saved into an object!)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(123.456, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123.46\n```\n\n\n:::\n:::\n\n\n\n\n\n\nSaving the result to an object:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrounded_num = round(123.456, digits = 2)\nprint(rounded_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123.46\n```\n\n\n:::\n:::\n\n\n\n\n\n\nin the example above, `round` is the function. `123.456` and `digits = 2` are the arguments/parameters.\n\n## How do I find out more about a particular function?\n\nYou can call the help page / vignette in R by prepending `?` to the function name.\n\nE.g. if you want to find out more about the `round` function, you can run `?round` in your R console (bottom left panel)\n\n## Packages in R\n\n-   Packages are a collections of R functions, datasets, etc. Packages extend the functionality of R.\n\n    -   (Closest analogy I can think of is that they're equivalent of browser add-ons, in a way)\n\n-   Popular packages: `tidyverse`, `caret`, `shiny`, etc.\n\n-   Installation (you only need to do this once): `install.packages(\"package name\")`\n\n-   Loading packages (you need to run this everytime you restart RStudio): `library(package name)` - let's try to load `tidyverse`!\n\n## Data Structures in R: Vectors\n\n-   Basic objects in R can only contain one value. But quite often you may want to group a bunch of values together and save it in a single object.\n\n-   A vector is a data structure that can do this. It is the most common and basic data structure in R. (pretty much the workhorse of R!)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1_courses <- c(\"IDIS110\", \"IDIS100\", \"PLE100\", \"PSYC111\", \"PSYC103\")\nstr(t1_courses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:5] \"IDIS110\" \"IDIS100\" \"PLE100\" \"PSYC111\" \"PSYC103\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(t1_courses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"IDIS110\" \"IDIS100\" \"PLE100\"  \"PSYC111\" \"PSYC103\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nExample of numeric vector:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1_grades <- c(50, 70, 80, 95, 77)\nstr(t1_grades)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:5] 50 70 80 95 77\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Vector Manipulations: Retrieve and update items\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retrieve the 1st item in the vector\nt1_grades[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50\n```\n\n\n:::\n\n```{.r .cell-code}\n# retrieves the 1st item up to the 3rd item\nt1_grades[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50 70 80\n```\n\n\n:::\n\n```{.r .cell-code}\n# update the value of the 1st item\nt1_grades[1] <- 65\nprint(t1_grades[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 65\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Vector Manipulations: Retrieve items based on criteria\n\n-   Let's say we want to retrieve items that are larger than 75.\n\n-   The code below will create a boolean vector called `criteria` that basically keep tracks on whether each items inside `t1_grades` fulfil our condition.\n\n-   The condition is \"value must be \\> 75\". e.g. if item 1 fulfils our condition, then item 1 is 'marked' as `TRUE`. Otherwise, it will be `FALSE`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncriteria <- t1_grades > 75 \nprint(criteria)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   This line of code applies the boolean vector `criteria` to `t1_grades`, and only retrieve items that fulfils the condition. i.e. items whose position is marked as `TRUE` by `criteria` vector\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1_grades[criteria]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 80 95 77\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Shortened version of the previous code\n\n-   You can shorten the code like this too (notice that we are not creating a temporary dataframe called criteria here):\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1_grades[t1_grades > 75]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 80 95 77\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Vector Manipulations: Handling NA values\n\n-   NA values indicate null values, or the absence of a value (0 is still a value!)\n\n-   Summary functions like `mean` needs you to specify in the arguments how you want it to be handled.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_vector <- c(21, 22, 23, 24, 25, NA, 27, 28, NA, 30)\n\n# by default it will be confused and return NA\nmean(missing_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# indicate that we want the NA values to be removed entirely\nmean(missing_vector, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Vector Manipulations: Adding items\n\nSeveral ways to add items to a vector\n\n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nt1_grades <- c(t1_grades, 92) # <1>\nt1_grades <- c(t1_grades, 88, 95, 79) # <2>\nt1_grades <- c(82, t1_grades) # <3>\nt1_grades <- append(t1_grades, 92, after = 2) # <2> # <4>\n```\n:::\n\n\n\n\n\n1.  Add a single grade to the end of the vector using c()\n2.  Add multiple grades to the end\n3.  Add a grade to the beginning\n4.  Insert a grade at a specific position using append()\n\n## Vector Manipulations: Removing items\n\n\n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nt1_grades <- t1_grades[-c(2, 4)] # <1>\nt1_grades <- t1_grades[t1_grades <= 90] # <2>\nt1_grades <- na.omit(t1_grades) # <3>\n```\n:::\n\n\n\n\n\n\n1.  Remove elements by index using \"negative indexing\"\n2.  Remove elements based on a condition using logical indexing\n3.  Remove NA values from the vector\n\n## Data Structures in R: Factors\n\n-   Special data structure in R to deal with categorical data.\n\n-   Can be ordered (ordinal) or unordered (nominal).\n\n-   May look like a normal vector at first glance, so use `str()` to check.\n\nUnordered (Nominal):\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunordered_factor <- factor(c(\"SOA\", \"SOSS\", \"SCIS\", \"CIS\", \"YPHSOL\")) \nstr(unordered_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 5 levels \"CIS\",\"SCIS\",\"SOA\",..: 3 4 2 1 5\n```\n\n\n:::\n:::\n\n\n\n\n\n\nOrdered (Ordinal):\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nordered_factor <- factor(c(\"Agree\", \"Disagree\", \"Neutral\", \"Disagree\"), \n                         ordered = TRUE, \n                         levels = c(\"Disagree\", \"Neutral\", \"Agree\")) \nstr(ordered_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Ord.factor w/ 3 levels \"Disagree\"<\"Neutral\"<..: 3 1 2 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Data Structures in R: Dataframe\n\n-   De facto data structure for tabular data in R, and what we use for data processing, plotting, and statistics.\n\n-   Similar to spreadsheets!\n\n-   You can create it by hand like so:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1_data <- data.frame(\n  course_code = c(\"IDIS110\", \"IDIS100\", \"PLE100\", \"PSYC111\", \"PSYC103\"),\n  grade = c(50, 70, 80, 95, 77)\n)\nprint(t1_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  course_code grade\n1     IDIS110    50\n2     IDIS100    70\n3      PLE100    80\n4     PSYC111    95\n5     PSYC103    77\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Creating dataframe from two (or more) vectors\n\nAlternatively, here is how to create one using the two vectors that we created earlier:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1_data <- data.frame(course_code = t1_courses, grade = t1_grades)\nprint(t1_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  course_code grade\n1     IDIS110    65\n2     IDIS100    70\n3      PLE100    80\n4     PSYC111    95\n5     PSYC103    77\n```\n\n\n:::\n:::\n\n\n\n\n\n\nMost of the time, our dataframe will be generated by loading from external data file such as CSV, SAV, or XLSX file.\n\nLet's try loading one from a CSV!\n\n## Preparation: Get the CSV \n\n::: {.callout-note appearance=\"simple\" title=\"What is a CSV?\"}\n\nA CSV (Comma-Separated Values) file is a type of file that stores data in a plain text format. Each line in the file represents a row of data, and within each row, individual pieces of data (like numbers or words) are separated by commas. This format is commonly used for storing and transferring data, especially in spreadsheets and databases.\n\nYou can open CSV files in Excel, Google Sheets, or event Notepad!\n\n:::\n\n-   Download and save `chile_voting.csv` from [**this URL**](https://raw.githubusercontent.com/bellaratmelia/introductory-r-socsci/main/data/chile_voting.csv) \n-   Save the CSV file into your `data` folder.\n\n-   Check out the data dictionary/explanatory notes to learn more about the data, including the column names, data type inside each columns [here](https://rdrr.io/cran/carData/man/Chile.html).\n\n-   We need to use `readr` package, which is part of `tidyverse` package. So please install `tidyverse` first if you have not done so.\n\n## Loading data from CSV into a Dataframe\n\nLoad the CSV and save the content into a tibble/dataframe called `chile_data`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # <1>\n\nchile_data <- read_csv(\"data/chile_voting.csv\") # <2>\nhead(chile_data) # <3>\n```\n:::\n\n\n\n\n\n\n1.  Load the `tidyverse` library (make sure to have it installed first!)\n\n2.  Read the CSV file that we placed inside the the data folder with the help of `read_csv` function, and save it into `chile_data` dataframe.\n\n3.  Print the first few rows of the data to check if it's loaded correctly.\n\n## More ways to \"peek\" at the data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(chile_data) # <1>\nnames(chile_data) # <2>\nstr(chile_data) # <3>\nsummary(chile_data) # <4> \nhead(chile_data, n=5) # <5>\ntail(chile_data, n=5) # <6>\n```\n:::\n\n\n\n\n\n\n1.  return a vector of number of rows and columns\n2.  inspect columns\n3.  inspect structure\n4.  print the summary stats of the entire dataframe\n5.  view the first 5 rows\n6.  view the last 5 rows\n\n## Basic dataframe manipulations: Retrieving values\n\nSome basic dataframe functions before we move on to data wrangling next week:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchile_data[\"income\"] # <1>\nchile_data$income # <2>\nchile_data[3] # <3>\nchile_data[1, 4] # <4> \nchile_data[3, ] # <5>\n```\n:::\n\n\n\n\n\n\n1.  retrieve column by name (returns as tibble/dataframe)\n2.  another way to retrieve column by name (returns as vector)\n3.  get an entire column by index\n4.  get a cell at this row, column coord\n5.  get an entire row\n\n# End of Session 1!\n\nNext Session: Data wrangling with `dplyr` and `tidyr` packages\n",
    "supporting": [
      "01-intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}