{
  "hash": "8f9f5b8e47bab2ff0502128e5212f4fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R and RStudio\"\nauthor: \"Bella Ratmelia\"\nformat: revealjs\n---\n\n\n\n# Welcome!\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Preamble\n\n-   About me:\n\n    -   Senior Librarian, Research & Data Services team, SMU Libraries.\n\n    -   Bachelor in Info Tech (IT), MSc in Info Studies from NTU.\n\n    -   Have been with SMU since the pandemic era (2021).\n    \n    -   Have been doing this workshop since Aug 2023.\n\n-   About this workshop:\n\n    -   Live-coding format; code along with me!\n\n    -   Goal of workshop: to give you enough fundamentals (at least to the point that ChatGPT can't bluff you so easily) and confidence to explore R on your own.\n\n    -   Don't be afraid to ask for help! We are all here to learn.\n\n## The outline for these workshops\n\nThe workshops are structured to follow this workflow when dealing with data\n\n![](images/data-workflow.png)\n\n::: aside\nImage is taken from [R for Data Science (2e)](https://r4ds.hadley.nz/intro) by Hadley Wickham.\n:::\n\n## The outline for these workshops (explained)\n\n::: incremental\n1.  **Import** data into R, which means take data (stored in a file, via API, etc) and load it into a dataframe in R\n2.  **Tidy** the imported data.\n    -   Tidy = storing it in a consistent form that matches the semantics of the dataset.\n    -   Tidy data = each column is a variable, each row is an observation\n3.  Once a data it tidy, we can **transform** it. Transformation includes:\n    -   narrowing in on observations of interest (like all people in one city or all data from the last year)\n    -   creating new variables that are functions of existing variables (like computing speed from distance and time)\n    -   calculating a set of summary statistics (like counts or means).\n4.  Once we have tidy data with the info we need, we can **visualize** it and **model** it.\n5.  **Communicate** the result. It doesnâ€™t matter how well your models and visualization have led you to understand the data unless you can also communicate your results to others.\n:::\n\n## What is R? What is R Studio?\n\n**R**: The programming language and the software that interprets the R script\n\n**RStudio:** An IDE (Integrated Development Environment) that we use to interact more easily with R language and scripts.\n\n. . .\n\nYou will need to install **both** for this workshop. Go to <https://posit.co/download/rstudio-desktop> to download and install both if you have not done so.\n\nCheck out the course website for a step-by-step guide.\n\n## A Tour of RStudio\n\n![R Studio layout](images/rstudio-tour.jpg){fig-align=\"center\"}\n\n## Working Directory\n\n-   Working directory -\\> where R will look for files (scripts, data, etc).\n\n    -   By default, it will be on your Desktop\n\n    -   Best practice is to use **R Project** to organize your files and data into projects.\n\n    -   When using R Project, the working directory = project folder.\n\n## Creating the project for this workshop\n\n1.  Go to `File` \\> `New project`. Choose `New directory`, then `New project`\n\n2.  Enter `intro-r-socsci` as the name for this new folder (or \"directory\") and choose where you want to put this folder, e.g. `Desktop` or `Documents` if you are on Windows. This will be your working directory for the rest of the workshop!\n\n<!-- -->\n\n4.  Next, let's create 3 folders inside our working directory:\n\n    -   `data` - we will save our raw data here. **It's best practice to keep the data here untouched.**\n\n    -   `data-output` - if we need to modify raw data, store the modified version here.\n\n    -   `fig-output` - we will save all the graphics we created here!\n\n::: callout-warning\nDon't put your R projects inside your OneDrive folder as that may cause issues sometimes.\n:::\n\n# Let's Code!\n\nCreate a new R script - `File` \\> `New File` \\> `R script`.\n\n**Note: RStudio does not autosave your progress, so remember to save from time to time!**\n\n## R Objects and Values\n\nIn this line of code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_name <- \"Singapore\"\n```\n:::\n\n\n\n-   `\"Singapore\"` is a **value**. This can be either a character, numeric, or boolean data type. (more on this soon)\n-   `country_name` is the **object** where we store this value. This is so that we can keep this value to be used later.\n-   `<-` is the assignment operator to assign the value to the object.\n    -   You can also use `=`, but generally in R, `<-` is the convention.\n    -   Keyboard shortcut: `Alt` + `-` in Windows (`Option` + `-` in Mac)\n\n## Refresher: Quantitative Data Types\n\n-   [**Non-Continuous Data**]{.underline}\n\n    -   **Nominal/Categorical**: Non-ordered, non-numerical data, used to represent qualitative attribute.\n\n        -   Example: nationality, neighborhood, employment status\n\n    -   **Ordinal**: Ordered non-numerical data.\n\n        -   Example: Nutri-grade ratings, frequency of exercise (daily, weekly, bi-weekly)\n\n    -   **Discrete**: Numerical data that can only take specific value (usually integers)\n\n        -   Example: Shoe size, clothing size\n\n    -   **Binary**: Nominal data with only two possible outcome\n\n        -   Example: pass/fail, yes/no, survive/not survive\n\n------------------------------------------------------------------------\n\n-   [**Continuous Data**]{.underline}\n\n    -   **Interval**: Numerical data that can take any value within a range. [It does not have a \"true zero\".]{.underline}\n\n        -   Example: Celsius scale. Temperature of 0 C does not represent absence of heat.\n\n    -   **Ratio**: Numerical data that can take any value within a range. [it has a \"true zero\".]{.underline}\n\n        -   Example: Annual income. annual income of 0 represents no income.\n\n## Data Types in R\n\nThe four basic data types are characters, numeric, boolean, and integer. Let's look at examples using our WVS survey variables:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4\"}\ncountry_code <- \"SGP\" # Character\nlife_satisfaction <- 8.5 # Numeric (also sometimes called Double)\nis_religious <- TRUE # Boolean/Logical (true/false)\nbirth_year <- 1990L # Integer (whole numbers)\n```\n:::\n\n\n\n## Checking data type of a variable\n\nYou can use `str` or `typeof` to check the data type of an R object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(country_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(is_religious) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n logi TRUE\n```\n\n\n:::\n:::\n\n\n\n## Arithmetic operations in R\n\nYou can do arithmetic operations in R. For example, let's calculate average satisfaction scores:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(8 + 7 + 9) / 3  # Average of three satisfaction scores\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n2025 - 1990  # Calculate age from birth year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n:::\n\n\n\n## Boolean operations in R - Simple TRUE/FALSE statements\n\nBoolean operations in R are useful for filtering survey data. Before that, let's look at how R evaluates simple TRUE/FALSE statements\n\nIs life_satisfaction greater than 8?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_satisfaction <- 8.5 # assign a value of 8.5 to life_satisfaction\nlife_satisfaction > 8  #\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nIs the country Singapore?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_code == \"SGP\"  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nIs the country NOT Singapore?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_code != \"SGP\"  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n## Boolean operations in R - AND operator\n\nSometimes, we may have multiple statements to evaluate. This is where the Boolean Operators will come handy.\n\n**AND** operations (both conditions must be TRUE). In R, it is represented by ampersand `&`\n\nIs the country New Zealand AND is the life satisfaction more than 8?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(country_code == \"NZL\") & (life_satisfaction > 8) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n`country_code == \"NZL\"` is FALSE while `life_satisfaction > 8` is TRUE\n\nThe whole statement will return FALSE because not all conditions TRUE. \n\n## Boolean operations in R - OR operator\n\n**OR** operations (at least one condition must be TRUE). In R, it is represented by pipe symbol `|`\n\nIs the country New Zealand OR is the life satisfaction more than 8?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(country_code == \"NZL\") | (life_satisfaction > 8) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nAs long as one condition is met, this will be TRUE.\n\n## Functions in R\n\n-   A function is like a recipe in cooking.\n\n-   It takes some ingredients (inputs) and uses a set of instructions to produce a result (output).\n\n-   In R, a function is a pre-written set of recipes/instructions that performs a specific task. Function name will always be followed by round brackets `()`\n\nExample: `round()` function in R will round up numbers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.1415926)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n-   `round()` is the \"recipe\", while `3.1415926` is the \"ingredients\"\n\nSaving the result to an object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrounded_pi <- round(3.1415926)\nprint(rounded_pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n## Functions with Arguments in R\n\n-   Following the recipe analogy, arguments are the ingredients you provide to a function.\n\n-   Some arguments are required, while others are optional (they have default values).\n\n-   Each argument tells the function what to use or how to perform the task.\n\n- Example: Think of a bubble tea order as a function. The possible arguments/ingredients here are:\n\n    -   Tea - required ingredient\n\n    -   Milk - optional, the default is to include\n\n    -   Toppings - optional, the default choice is \"pearls\"\n\nIn R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.1415926, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.14\n```\n\n\n:::\n:::\n\n\n\n-   `3.1415926` is the required argument (if this is not provided, the function will not run)\n\n-   `digits` is an optional argument specifying how many decimal places to round to (the default is 0)\n\n## How do I find out more about a particular function?\n\nYou can call the help page / vignette in R by prepending `?` to the function name.\n\nE.g. if you want to find out more about the `round` function, you can run `?round` in your R console (bottom left panel)\n\n## Packages in R\n\n-   Packages are a collections of R functions, datasets, etc. Packages extend the functionality of R.\n\n    -   (Closest analogy I can think of is that they're equivalent of browser add-ons, in a way)\n\n-   Popular packages: `tidyverse`, `caret`, `shiny`, etc.\n\n-   Installation (you only need to do this once): `install.packages(\"package name\")`\n\n-   Loading packages (you need to run this everytime you restart RStudio): `library(package name)` - let's try to load `tidyverse`!\n\n## Data Structures in R\n\nIn today's session, we will explore 3 basic types of data **structures** in R:\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n1.  **Vector** - can hold multiple values in a single variable/object.\n\n2.  **Factor** - Special data structure in R to handle categorical variables.\n\n3.  **Data frame** - De facto data structure for tabular data in R, and what we use for data processing, plotting, and statistics.\n:::\n\n::: {.column width=\"60%\"}\n![](images/data-structures.svg)\n:::\n\n::::\n\n\n\n\n\n## Data Structures in R: Vectors\n\n-   Basic objects in R can only contain one value. But quite often you may want to group a bunch of values together and save it in a single object.\n\n-   A vector is a data structure that can do this. It is the most common and basic data structure in R. (pretty much the workhorse of R!)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- c(\"CAN\", \"NZL\", \"SGP\", \"CAN\", \"SGP\")\nsatisfaction_scores <- c(8, 7, 9, 6, 8)\nemployment_status <- c(\"Full time\", \"Student\", \"Part time\", \"Retired\", \"Full time\")\n```\n:::\n\n\n\n## Vector Manipulations: Retrieve and update items\n\nRetrieve the first country in the vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CAN\"\n```\n\n\n:::\n:::\n\n\n\nRetrieves the first three satisfaction scores\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nsatisfaction_scores[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 7 9\n```\n\n\n:::\n:::\n\n\n\nUpdate the first satisfaction score\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsatisfaction_scores[1] <- 7\nprint(satisfaction_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 7 9 6 8\n```\n\n\n:::\n:::\n\n\n\n## Why square brackets and not round brackets?\n\nRound brackets `()` are for running functions, like using a tool: `mean()` or `sum()`.\n\nSquare brackets `[]` are for accessing specific parts of your data, where we pass the index number(s) of the element(s) we want. For dataframes, we can use either index numbers or column names (more on this later!)\n\n\n## Vector Manipulations: Retrieve items based on criteria\n\nLet's find high satisfaction scores (above 7)!\n\n-   The code below will create a boolean vector called `criteria` that basically keep tracks on whether each items inside `satisfaction_scores` fulfil our condition.\n\n-   The condition is \"value must be \\> 7\". e.g. if item 1 fulfils our condition, then item 1 is 'marked' as `TRUE`. Otherwise, it will be `FALSE`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create boolean vector for our condition\ncriteria <- satisfaction_scores > 7\nprint(criteria)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n-   This line of code applies the boolean vector `criteria` to `satisfaction_scores`, and only retrieve items that fulfils the condition. i.e. items whose position is marked as `TRUE` by `criteria` vector\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use the boolean vector to filter satisfaction scores\nsatisfaction_scores[criteria]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9 8\n```\n\n\n:::\n:::\n\n\n\n\n## Vector Manipulations: Handling NA values\n\n-   NA values indicate null values, or the absence of a value (0 is still a value!)\n\n-   Summary functions like `mean` needs you to specify in the optional argument called `na.rm` on how you want it to be handled.\n\nSurvey data often contains missing values (NA):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinancial_satisfaction <- c(8, 7, NA, 6, 9, NA, 7)\n\n# By default, mean() will return NA if there are any NA values\nmean(financial_satisfaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# Remove NA values before calculating mean by specifying that na.rm = TRUE\nmean(financial_satisfaction, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.4\n```\n\n\n:::\n:::\n\n\n\n## Vector Manipulations: Adding items\n\nSeveral ways to add items to a vector\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsatisfaction_scores <- c(satisfaction_scores, 7) # <1>\nsatisfaction_scores <- c(satisfaction_scores, 8, 9, 10) # <2>\nsatisfaction_scores <- c(8, satisfaction_scores) # <3>\nsatisfaction_scores <- append(satisfaction_scores, 9, after = 2) # <2> # <4>\n```\n:::\n\n\n\n1.  Add a single score to the end of the vector using c()\n2.  Add multiple scores to the end\n3.  Add a score to the beginning\n4.  Insert a score at a specific position using append()\n\n## Vector Manipulations: Removing items\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsatisfaction_scores <- satisfaction_scores[-c(2, 4)] # <1>\nsatisfaction_scores <- satisfaction_scores[satisfaction_scores <= 7] # <2>\nsatisfaction_scores <- na.omit(satisfaction_scores) # <3>\n```\n:::\n\n\n\n1.  Remove elements by index using \"negative indexing\"\n2.  Remove elements based on a condition using logical indexing\n3.  Remove NA values from the vector\n\n## Data Structures in R: Factors\n\n-   Special data structure in R to deal with categorical data.\n\n-   Can be ordered (ordinal) or unordered (nominal).\n\n-   May look like a normal vector at first glance, so use `str()` to check.\n\nUnordered (Nominal):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemployment_factor <- factor(c(\"Full time\", \"Part time\", \"Student\", \"Retired\", \"Student\"))\nstr(employment_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 4 levels \"Full time\",\"Part time\",..: 1 2 4 3 4\n```\n\n\n:::\n:::\n\n\n\nOrdered (Ordinal):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimportance_factor <- factor(\n    c(\"Very important\", \"Important\", \"Not very important\", \"Not at all important\"),\n    ordered = TRUE,\n    levels = c(\"Not at all important\", \"Not very important\", \"Important\", \"Very important\")\n)\nstr(importance_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Ord.factor w/ 4 levels \"Not at all important\"<..: 4 3 2 1\n```\n\n\n:::\n:::\n\n\n\n## Data Structures in R: Dataframe\n\n-   De facto data structure for tabular data in R, and what we use for data processing, plotting, and statistics.\n\n-   Similar to spreadsheets!\n\n-   You can create it by hand like so:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data <- data.frame(\n    country = c(\"SGP\", \"CAN\", \"NZL\", \"SGP\", \"CAN\"),\n    life_satisfaction = c(8, 7, 9, 6, 8),\n    employment = c(\"Full time\", \"Student\", \"Part time\", \"Retired\", \"Full time\")\n)\nprint(survey_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  country life_satisfaction employment\n1     SGP                 8  Full time\n2     CAN                 7    Student\n3     NZL                 9  Part time\n4     SGP                 6    Retired\n5     CAN                 8  Full time\n```\n\n\n:::\n:::\n\n\n\n## Downloading the World Values Survey (WVS) Dataset\n\nFor this workshop, we will try loading a dataset from a file.\n\nGo to the course website and go to the ['Dataset'](https://bellaratmelia.github.io/introductory-r-socsci/dataset.html) tab to download the data file and information about this WVS data\n\nDownload this CSV and save it under your `data` folder in your R project!\n\n## Loading the WVS Dataset\n\nLet's load our actual World Values Survey dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nwvs_data <- read_csv(\"data/wvs-wave7-sg-ca-nz.csv\") # \nhead(wvs_data)\n```\n:::\n\n\n\nMake sure to save the CSV file in your data folder!\n\n## Exploring the WVS Dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(wvs_data) # <1>\nnames(wvs_data) # <2>\nstr(wvs_data) # <3>\nsummary(wvs_data) # <4> \nhead(wvs_data, n=5) # <5>\ntail(wvs_data, n=5) # <6>\n```\n:::\n\n\n\n1.  return a vector of number of rows and columns\n2.  inspect columns\n3.  inspect structure\n4.  print the summary stats of the entire dataframe\n5.  view the first 5 rows\n6.  view the last 5 rows\n\n## Basic dataframe manipulations: Retrieving values\n\nSome basic dataframe functions before we move on to data wrangling next week:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwvs_data[\"country\"] # <1>\nwvs_data$country # <2>\nwvs_data[3] # <3>\nwvs_data[1, 4] # <4> \nwvs_data[3, ] # <5>\n```\n:::\n\n\n\n1.  retrieve column by name (returns as tibble/dataframe)\n2.  another way to retrieve column by name (returns as vector)\n3.  get an entire column by index\n4.  get a cell at this row, column coord\n5.  get an entire row\n\n# End of Session 1!\n\nNext Session: Data wrangling with `dplyr` and `tidyr` packages - we'll learn how to:\n\n-   Filter survey responses by country\n\n-   Calculate average satisfaction scores by demographic groups\n\n-   Create new variables from existing ones\n\n-   Handle missing values in survey data\n\n-   And much more!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}