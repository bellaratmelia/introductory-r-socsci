{
  "hash": "4ab4fbfb560f64956bb85ff67f8aa9b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R and RStudio\"\nauthor: \"Bella Ratmelia\"\nformat: revealjs\n---\n\n\n\n# Welcome!\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Preamble\n\n-   About me:\n\n    -   Librarian, Research & Data Services team, SMU Libraries.\n\n    -   Bachelor in Info Tech (IT), MSc in Info Studies.\n\n    -   Have been with SMU since the pandemic era (2021).\n\n-   About this workshop:\n\n    -   Live-coding format; code along with me!\n\n    -   Goal of workshop: to give you enough fundamentals (at least to the point that ChatGPT can't bluff you so easily) and confidence to explore R on your own.\n\n    -   Don't be afraid to ask for help! We are all here to learn.\n\n## What is R? What is R Studio?\n\n**R**: The programming language and the software that interprets the R script\n\n**RStudio:** An IDE (Integrated Development Environment) that we use to interact more easily with R language and scripts.\n\n. . .\n\nYou will need to install **both** for this workshop. Go to <https://posit.co/download/rstudio-desktop> to download and install both if you have not done so.\n\nCheck out the course website for a step-by-step guide. \n\n## 7 Reasons to learn R\n\n1.  R is free, open-source, and cross-platform.\n\n2.  R does not involve lots of pointing and clicking - you don't have to remember a complicated sequence of clicks to re-run your analysis.\n\n3.  R code is great for reproducibility - when someone else (including your future self) can obtain the same results from the same dataset and same analysis.\n\n4.  R is interdisciplinary and extensible\n\n5.  R is scalable and works on data of all shapes and sizes (though admittedly, it is not best at some scenarios and other languages such as python would be preferred.)\n\n6.  R produces high-quality and publication-ready graphics\n\n7.  R has a large and welcoming community - which means there are lots of help available!\n\n## A Tour of RStudio\n\n![R Studio layout](images/rstudio-tour.jpg){fig-align=\"center\"}\n\n## Working Directory\n\n-   Working directory -\\> where R will look for files (scripts, data, etc).\n\n    -   By default, it will be on your Desktop\n\n    -   Best practice is to use **R Project** to organize your files and data into projects.\n\n    -   When using R Project, the working directory = project folder.\n\n## Creating the project for this workshop\n\n1.  Go to `File` \\> `New project`. Choose `New directory`, then `New project`\n\n2.  Enter `intro-r-socsci` as the name for this new folder (or \"directory\") and choose where you want to put this folder, e.g. `Desktop` or `Documents` if you are on Windows. This will be your working directory for the rest of the workshop!\n\n<!-- -->\n\n4.  Next, let's create 3 folders inside our working directory:\n\n    -   `data` - we will save our raw data here. **It's best practice to keep the data here untouched.**\n\n    -   `data-output` - if we need to modify raw data, store the modified version here.\n\n    -   `fig-output` - we will save all the graphics we created here!\n\n::: callout-warning\nDon't put your R projects inside your OneDrive folder as that may cause issues sometimes.\n:::\n\n# Let's Code!\n\nCreate a new R script - `File` > `New File` > `R script`.\n\n**Note: RStudio does not autosave your progress, so remember to save from time to time!**\n\n## R Objects and Values\n\nIn this line of code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_name <- \"Singapore\"\n```\n:::\n\n\n\n- `\"Singapore\"` is a value. This can be either a character, numeric, or boolean data type. (more on this soon)\n- `country_name` is the object where we store this value. This is so that we can keep this value to be used later.\n- `<-` is the assignment operator to assign the value to the object.\n    - You can also use `=`, but generally in R, `<-` is the convention.\n    - Keyboard shortcut: `Alt` + `-` in Windows (`Option` + `-` in Mac)\n\n[Previous data types explanation remains the same]\n\n## Data Types in R\n\nThe four basic data types are characters, numeric, boolean, and integer. Let's look at examples using our WVS survey variables:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4\"}\ncountry_code <- \"SGP\" # Character\nlife_satisfaction <- 8.5 # Numeric (also sometimes called Double)\nis_religious <- TRUE # Boolean/Logical (true/false)\nbirth_year <- 1990L # Integer (whole numbers)\n```\n:::\n\n\n\n## Checking data type of a variable\n\nYou can use `str` or `typeof` to check the data type of an R object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(country_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(is_religious) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n logi TRUE\n```\n\n\n:::\n:::\n\n\n\n## Arithmetic operations in R\n\nYou can do arithmetic operations in R. For example, let's calculate average satisfaction scores:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(8 + 7 + 9) / 3  # Average of three satisfaction scores\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n2025 - 1990  # Calculate age from birth year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35\n```\n\n\n:::\n:::\n\n\n\n## Boolean operations in R\n\nBoolean operations in R are useful for filtering survey data:\n\n**AND** operations (both conditions must be TRUE)\n\n```r\n# Check if someone is both highly satisfied (>8) AND from Singapore\n(life_satisfaction > 8) & (country_code == \"SGP\")\n```\n\n**OR** operations (at least one condition must be TRUE)\n\n```r\n# Check if someone is either married OR living together as married\nmarital_status == \"Married\" | marital_status == \"Living together as married\"\n```\n\n## Functions in R\n\nFunctions take inputs (arguments/parameters), process them, and return a result. For example, calculating the mean satisfaction score:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsatisfaction_scores <- c(7.5, 8.0, 6.5, 9.0)\nround(mean(satisfaction_scores), digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.8\n```\n\n\n:::\n:::\n\n\n\nSaving the result to an object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_satisfaction = round(mean(satisfaction_scores), digits = 1)\nprint(avg_satisfaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.8\n```\n\n\n:::\n:::\n\n\n\n[Previous package installation instructions remain the same]\n\n## Data Structures in R: Vectors\n\nVectors can store multiple values. Let's create vectors using our survey data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- c(\"CAN\", \"NZL\", \"SGP\", \"CAN\", \"SGP\")\nsatisfaction_scores <- c(8, 7, 9, 6, 8)\nemployment_status <- c(\"Full time\", \"Student\", \"Part time\", \"Retired\", \"Full time\")\n```\n:::\n\n\n\n## Vector Manipulations: Retrieve and update items\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retrieve the first country in the vector\ncountries[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CAN\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# retrieves the first three satisfaction scores\nsatisfaction_scores[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 7 9\n```\n\n\n:::\n\n```{.r .cell-code}\n# update the first satisfaction score\nsatisfaction_scores[1] <- 7\nprint(satisfaction_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 7 9 6 8\n```\n\n\n:::\n:::\n\n\n\n## Vector Manipulations: Retrieve items based on criteria\n\nLet's find high satisfaction scores (above 7):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create boolean vector for our condition\nhigh_satisfaction <- satisfaction_scores > 7\nprint(high_satisfaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Use the boolean vector to filter satisfaction scores\nsatisfaction_scores[high_satisfaction]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9 8\n```\n\n\n:::\n:::\n\n\n\n## Vector Manipulations: Handling NA values\n\nSurvey data often contains missing values (NA):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinancial_satisfaction <- c(8, 7, NA, 6, 9, NA, 7)\n\n# By default, mean() will return NA if there are any NA values\nmean(financial_satisfaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# Remove NA values before calculating mean\nmean(financial_satisfaction, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.4\n```\n\n\n:::\n:::\n\n\n\n## Data Structures in R: Factors\n\nFactors are perfect for categorical survey variables:\n\nUnordered (Nominal):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemployment_factor <- factor(c(\"Full time\", \"Part time\", \"Student\", \"Retired\", \"Student\"))\nstr(employment_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 4 levels \"Full time\",\"Part time\",..: 1 2 4 3 4\n```\n\n\n:::\n:::\n\n\n\nOrdered (Ordinal):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimportance_factor <- factor(\n    c(\"Very important\", \"Important\", \"Not very important\", \"Not at all important\"),\n    ordered = TRUE,\n    levels = c(\"Not at all important\", \"Not very important\", \"Important\", \"Very important\")\n)\nstr(importance_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Ord.factor w/ 4 levels \"Not at all important\"<..: 4 3 2 1\n```\n\n\n:::\n:::\n\n\n\n## Data Structures in R: Dataframe\n\nCreate a small dataframe with survey responses:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data <- data.frame(\n    country = c(\"SGP\", \"CAN\", \"NZL\", \"SGP\", \"CAN\"),\n    life_satisfaction = c(8, 7, 9, 6, 8),\n    employment = c(\"Full time\", \"Student\", \"Part time\", \"Retired\", \"Full time\")\n)\nprint(survey_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  country life_satisfaction employment\n1     SGP                 8  Full time\n2     CAN                 7    Student\n3     NZL                 9  Part time\n4     SGP                 6    Retired\n5     CAN                 8  Full time\n```\n\n\n:::\n:::\n\n\n\n## Loading the WVS Dataset\n\nLet's load our actual World Values Survey dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nwvs_data <- read_csv(\"data/wvs-wave7-sg-ca-nz.csv\") # Make sure to save the WVS data in your data folder\nhead(wvs_data)\n```\n:::\n\n\n\n## Exploring the WVS Dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(wvs_data) # Check dimensions (7061 rows, 16 columns)\nnames(wvs_data) # View all variable names\nstr(wvs_data) # Check structure and data types\nsummary(wvs_data) # Get summary statistics\n```\n:::\n\n\n\n# End of Session 1!\n\nNext Session: Data wrangling with `dplyr` and `tidyr` packages - we'll learn how to:\n- Filter survey responses by country\n- Calculate average satisfaction scores by demographic groups\n- Create new variables from existing ones\n- Handle missing values in survey data\n- And much more!",
    "supporting": [
      "01-intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}