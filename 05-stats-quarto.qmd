---
title: "Regression and Introduction to Quarto"
author: "Bella Ratmelia"
format: revealjs
---

## Today's Outline

1.  Simple Linear Regression in R
2.  Binary Logistic Regression in R
3.  Create your manuscript with Quarto

## Load our data for today!

```{r}
#| echo: true
#| label: load-data
#| message: false
#| output: false

# import tidyverse library
library(tidyverse)

# read the CSV with Chile voting data
chile_data <- read_csv("data-output/chile_voting_processed.csv")

chile_data <- chile_data |> 
    mutate(across(c("region", "sex", "education", "vote", "age_group", "support_level"), as_factor))

#reordering
chile_data <- chile_data |> 
    mutate(education = factor(education, 
                         levels = c("P", "S", "PS"), 
                         ordered = TRUE))

# peek at the data, pay attention to the data types!
glimpse(chile_data)
```

## Simple Linear Regression

**Linear regression** is a statistical method used to model the relationship between a dependent variable (outcome) and one or more independent variables (predictors) by fitting a linear equation to the observed data. The math formula looks like this:

::: columns
::: {.column width="30%"}
$$
Y = \beta_0 + \beta_1X + \varepsilon
$$
:::

::: {.column style="font-size: 75%; width: 70%;"}
-   $Y$ - the dependent variable; **must be continuous**
-   $X$ - the independent variable (if there are more than one, there will be $X_1$ , $X_2$ , and so on. This can be ordinal, nominal, or continuous
-   $\beta_0$ - the y-intercept. Represents the expected value of independent variable $Y$ when independent variable(s) $X$ are set to zero.
-   $\beta_1$ - the slope / coefficient for independent variable
-   $\varepsilon$ - the error term. (In some examples you might see this omitted from the formula).
:::
:::

Examples:

-   Does a person's **age** affect their **income**?
-   Do a person's **age** and **education level** affect their **income**?

## Linear Regression: One continuous predictor

**Research Question:** Does a person's **age** influence their **support to incumbent** in Chile?

-   The outcome/DV ($Y$): `statusquo`
-   The predictor/IV ($X$): `age`

```{r}
#| echo: true
#| output-location: slide
statsquo_model1 <- lm(statusquo ~ age, data = chile_data)
summary(statsquo_model1) #summarize the result
```

::: {style="font-size: 75%; width: 75%"}
-   **Call**: the formula
-   **Residuals**: overview on the distribution of residuals (expected value minus observed value) -- we can plot this to check for homoscedasticity -
-   **Coefficients**: shows the intercept, the regression coefficients for the predictor variables, and their statistical significance
-   **Residual standard error**: the average difference between observed and expected outcome by the model. Generally the lower, the better.
-   **R-squared & Adjusted R-squared**: indicates the proportion of variation in the outcome that can be explained by the model i.e., how "accurate" is your model?
-   **F-statistics**: overall significance
:::

## Linear Regression: Multiple continuous predictors

**Research Question:** Do a person's age and their income have an impact on their support for the incumbent?

-   The outcome/DV ($Y$): `statusquo`
-   The predictor/IV ($X$): `age` and `income`

```{r}
#| echo: true
statsquo_model2 <- lm(statusquo ~ age + income, data = chile_data)
summary(statsquo_model2)
```

## Presenting your models {.scrollable}

Don't forget to install the library by running this line in your terminal: `install.packages("huxtable")`

```{r}
#| echo: true
library(huxtable)
huxreg("age" = statsquo_model1, "age + income" = statsquo_model2)
```

## FYI: Multicollinearity

Caution! When doing regression-type of tests, watch out for multicollinearity.

Multicollinearity is a situation in which two or more predictor variables are highly correlated with each other. This makes it difficult to determine the specific contribution of each predictor variable to the relationship.

One way to check for it:

-   Assess the correlation between your predictor variables in your model using Variance Inflation Factor (VIF)

-   If they seem to be highly correlated (\> 5 or so), one of the easiest (and somewhat acceptable) way is to simply remove the less significant predictor from your model :D

```{r}
#| echo: true
car::vif(statsquo_model2)
```

## Linear Regression: One categorical predictor

**Research question**: Explore the difference of support for `statusquo` between different `sex`.

-   The outcome/DV ($Y$): `statusquo`
-   The predictor/IV ($X$): `sex`

::: callout-note
Before proceeding with analysis, ensure that all the categorical variables involved are cast as factors!
:::

```{r}
#| echo: true

str(chile_data$statusquo)
str(chile_data$sex)
```

## Continuing the analysis

The analysis summary should look like this:

```{r}
#| echo: true
statusquo_model3 <- lm(statusquo ~ sex, data = chile_data)
summary(statusquo_model3)
```

When interpreting a categorical predictor in regression, one category is treated as the reference category, which serves as the baseline for comparison. In this case, the reference category corresponds to the intercept.

By default, the first category in the data is used as the reference category, unless specified otherwise.

## Categorical predictor: changing the reference

Let's change the reference category for `sex` variable to "M".

```{r}
#| echo: true

chile_data <- chile_data |> 
    mutate(sex = relevel(sex, ref = "M"))

str(chile_data$sex)
```

Re-run the analysis with the new reference category

```{r}
#| echo: true
#| output-location: slide
statsquo_model3 <- lm(statusquo ~ sex, data = chile_data)
summary(statsquo_model3)
```

## Let's try this Linear Regression exercise! (5 mins)

Create a regression model called `statusquo_model4` that predicts the `statusquo` score based on `region`. Make sure the reference category is region "M".

```{r}
#| echo: false
#| output: false

statusquo_model4 <- lm(statusquo ~ region, data = chile_data)
summary(statusquo_model4)
```

## Binary Logistic Regression

Also known as simply logistic regression, it is used to model the relationship between a set of independent variables and a binary outcome.

These independent variables can be either categorical or continuous.

Binary Logistics Regression formula:

$$
logit(P) = \beta_0 + \beta_1X_1 + \beta_2X_2 + … + \beta_nX_n
$$

It can also be written like below, in which the $logit(P)$ part is expanded:

$$
P = \frac{1}{1 + e^{-(\beta_0 + \beta_1X)}}
$$

## Binary Logistic Regression Examples

-   Does a person’s **age** and **education level** influence whether they will vote Yes or No in a referendum?
-   Does the number of **hours spent studying** impact a student’s likelihood of passing a module? (pass/fail outcome)

In essence, the goal of binary logistic regression is to estimate the probability of a specific event happening when there are only two possible outcomes (hence the term "binary").

## Binary Logistic Regression: One Continuous Predictor

**Research Question**: Does **age** affect the likelihood of voting "Yes" in the plebiscite?

-   The outcome/DV ($Y$): `vote` - there are 4 outcomes here, but for the purpose of this workshop practice, let's define the outcome as "Yes" and "not Yes" outcome
-   The predictor/IV ($X$): `age`

Before we proceed with the calculations, we need to **dummy code** the dependent variable into 1 and 0, with 1 = Yes and 0 = Not Yes. [More info on dummy coding here](https://stats.oarc.ucla.edu/other/mult-pkg/faq/general/faqwhat-is-dummy-coding/)

```{r}
#| echo: true
# First, we need to create a binary outcome
chile_data <- chile_data |>
    mutate(vote_yes = ifelse(vote == "Y", 1, 0))

```

```{r}
chile_data |> select(vote, vote_yes) |> print(n = 3)
```

## Binary Logistic Regression: One Continuous Predictor

Let's conduct the analysis!

```{r}
#| echo: true

vote_age <- glm(vote_yes ~ age,
                family = binomial, 
                data = chile_data)

summary(vote_age)
```

## Exponentiate the coefficients

If you recall the formula, the results are expressed in Logit Probability. As we typically report the result in terms of Odd Ratios (OR), we need to exponentiate the coefficients.

```{r}
#| echo: true
exp(coefficients(vote_age))
```

\[interpretation to OR here\]

## Binary Logistic Regression: One Categorical Predictor

**Research Question**: Does **education level** affect the likelihood of voting "Yes" in the plebiscite?

-   The outcome/DV ($Y$): `vote` - there are 4 outcomes here, but for the purpose of this workshop practice, let's define the outcome as "Yes" and "not Yes" outcome
-   The predictor/IV ($X$): `education`

```{r}
#| echo: true
#| output-location: slide
vote_education <- glm(vote_yes ~ education,
                      family = "binomial",
                      data = chile_data)

summary(vote_education)

```

## Exponentiate the coefficients

If you recall the formula, the results are expressed in Logit Probability. As we typically report the result in terms of Odd Ratios (OR), we need to exponentiate the coefficients.

```{r}
#| echo: true
exp(coefficients(vote_education))
```

\[interpretation to OR here\]

## Changing baseline category for ordered factor

``` r
chile_data <- chile_data |> 
    mutate(education = factor(education, 
                         levels = c("S", "P", "PS"), 
                         ordered = TRUE))
```

::: {.callout-note appearance="simple" title="Releveling ordered factor"}
Previously, we could use the `relevel()` function to change the reference category for ordered factors. However, in recent R versions, this no longer works for ordered factors, so we now use the method shown in the code above. The `relevel()` function still works for unordered factors.
:::

## Present both models in a table {.scrollable}

```{r}
#| echo: true
library(huxtable)
huxreg("age" = vote_age, "education" = vote_education)
```

## Let's try this Logistic Regression exercise! (5 mins)

Create a regression model called `vote_model` that predicts the likelihood of voting "Yes" based on `age` and `vote` intention. Make sure that the reference category for `vote` is set to U (Undecided).

```{r}
#| echo: false
#| output: false

chile_data <- chile_data |> 
    mutate(vote = relevel(vote, ref = "U"))

vote_model <- glm(vote_yes ~ age + vote,
                  family = "binomial", 
                  data = chile_data) 

summary(vote_model)
exp(coefficients(vote_model))
```

# What is Quarto? What is Markdown?

## **Markdown (Specifically, R Markdown)** {.incremental}

-   **Markdown** is a lightweight markup language that provides a simple and readable way to write formatted text without using complex HTML or LaTeX. It is designed to make authoring content easy for everyone!

    -   Markdown files can be converted into HTML or other formats.
    -   Generic Markdown file will have `.md` extension.

-   **R Markdown** is an extension of Markdown that incorporates R code chunks and allows you to create dynamic documents that integrate text, code, and output (such as tables and plots).

    -   RMarkdown file will have `.Rmd` extension.

## RMarkdown in action

![](images/rmarkdown.png){fig-align="center"}

## How it all works

![Illustration by Allison Horst (www.allisonhorst.com)](images/rmarkdown_wizards.png){fig-align="center"}

## Quarto

-   **Quarto** is a [multi-language]{.underline}, [next-generation]{.underline} version of R Markdown from Posit and includes dozens of new features and capabilities while at the same being able to render most existing Rmd files without modification.

![Illustration by Allison Horst (www.allisonhorst.com)](images/quarto-rendering.png){fig-align="center"}

## Quarto in action: R scripts + Markdown

![](images/quarto.png){fig-align="center"}

## R Scripts vs Quarto

::: columns
::: {.column width="50%"}
**R Scripts**

-   Great for quick debugging, experiment

-   Preferred format if you are archiving your code to GitHub or data repository

-   More suitable for "production" tasks e.g. automating your data cleaning and processing, custom functions, etc.
:::

::: {.column width="50%"}
**Quarto**

-   Great for report and presentation to showcase your research insights/process as it integrates code, narrative text, visualizations, and results.

-   Very handy when you need your report in multiple format, e.g. in Word and PPT.
:::
:::

## Let's create our first Quarto document!

1.  Go to `File` \> `New File` \> `Quarto Document`
2.  Put any title you like, and put your name as the author
3.  Check `HTML` as the end result for now
4.  Click on `Create`!
5.  *Optional*: collapse the console and environment tab (bottom left and top right) to make it easier to view the quarto document and the output.
6.  **Quarto Tour + Hands On!** (Open [this cheatsheet](https://rstudio.github.io/cheatsheets/html/quarto.html) on another tab if you'd like!). We will explore how to:
    1.  Add narrative text
    2.  Add code chunks
    3.  Add math formulas with LaTeX
    4.  Add citations (you need to have Zotero installed)

## Rendering Quarto to HTML, Word, and PDF

You can change the final result of rendering in the `YAML` section of your document.

1.  Rendering to HTML is the default option.
    -   You can also render as presentation (fun fact: my slides is made from Quarto!)
2.  Rendering to Word: You have to have MS Word installed in your laptop
3.  Rendering to PDF: If you encounter an error when converting your result to PDF, the faster (and easier) alternative is to render your doc to Word, and save to PDF from there.

# Best Practices + More Resources

## R Best Practices

-   Use `<-` for assigning values to objects.

    -   Only use `=` when passing values to a function parameter.

-   [**Do not alter your raw data**]{.underline}; save your wrangled/cleaned data into a new file and keep it separate from the raw data.

-   Make use of R projects to organize your data and make it easier to send over to your collaborators.

    -   Having said that, when it comes to coding project, the best way to collaborate is using GitHub or similar platforms.

-   Whenever possible and makes sense for your project, follow the common convention when naming your objects, scripts, and functions. One guide that you can follow is [Hadley Wickham's tidyverse style guide](https://style.tidyverse.org/).


# Thank you for your participation!

:::: {.columns}

::: {.column width="35%"}
![](images/wedidit.webp)
:::

::: {.column width="65%"}
All the best for your studies and academic journey! (manifesting excellent grades)

Need help with R or Quarto? Please don't hesitate to contact me at `bellar@smu.edu.sg` or `libresearch@smu.edu.sg`
:::

::::


## Post-workshop survey

Please scan this QR code or click on the link below to fill in the post-workshop survey. It should not take more than 2-3 minutes.

Survey link: <https://smusg.asia.qualtrics.com/jfe/form/SV_1TYE6ntFBi3lwbQ>

![](images/post-workshop-qrcode.png){width="500"}
