---
title: "Introduction to R and RStudio"
author: "Bella Ratmelia"
format: revealjs
---

# Welcome!

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
```

## Preamble

-   About me:

    -   Librarian, Research & Data Services team, SMU Libraries.

    -   Bachelor in Info Tech (IT), MSc in Info Studies.

    -   Have been with SMU since the pandemic era (2021).

-   About this workshop:

    -   Live-coding format; code along with me!

    -   Goal of workshop: to give you enough fundamentals (at least to the point that ChatGPT can't bluff you so easily) and confidence to explore R on your own.

    -   Don't be afraid to ask for help! We are all here to learn.

## What is R? What is R Studio?

**R**: The programming language and the software that interprets the R script

**RStudio:** An IDE (Integrated Development Environment) that we use to interact more easily with R language and scripts.

. . .

You will need to install **both** for this workshop. Go to <https://posit.co/download/rstudio-desktop> to download and install both if you have not done so.

Check out the course website for a step-by-step guide. 

## 7 Reasons to learn R

1.  R is free, open-source, and cross-platform.

2.  R does not involve lots of pointing and clicking - you don't have to remember a complicated sequence of clicks to re-run your analysis.

3.  R code is great for reproducibility - when someone else (including your future self) can obtain the same results from the same dataset and same analysis.

4.  R is interdisciplinary and extensible

5.  R is scalable and works on data of all shapes and sizes (though admittedly, it is not best at some scenarios and other languages such as python would be preferred.)

6.  R produces high-quality and publication-ready graphics

7.  R has a large and welcoming community - which means there are lots of help available!

## A Tour of RStudio

![R Studio layout](images/rstudio-tour.jpg){fig-align="center"}

## Working Directory

-   Working directory -\> where R will look for files (scripts, data, etc).

    -   By default, it will be on your Desktop

    -   Best practice is to use **R Project** to organize your files and data into projects.

    -   When using R Project, the working directory = project folder.

## Creating the project for this workshop

1.  Go to `File` \> `New project`. Choose `New directory`, then `New project`

2.  Enter `intro-r-socsci` as the name for this new folder (or "directory") and choose where you want to put this folder, e.g. `Desktop` or `Documents` if you are on Windows. This will be your working directory for the rest of the workshop!

<!-- -->

4.  Next, let's create 3 folders inside our working directory:

    -   `data` - we will save our raw data here. **It's best practice to keep the data here untouched.**

    -   `data-output` - if we need to modify raw data, store the modified version here.

    -   `fig-output` - we will save all the graphics we created here!

::: callout-warning
Don't put your R projects inside your OneDrive folder as that may cause issues sometimes.
:::

# Let's Code!

Create a new R script - `File` > `New File` > `R script`.

**Note: RStudio does not autosave your progress, so remember to save from time to time!**

## R Objects and Values

In this line of code:

```{r}
#| echo: true
country_name <- "Singapore"
```

- `"Singapore"` is a value. This can be either a character, numeric, or boolean data type. (more on this soon)
- `country_name` is the object where we store this value. This is so that we can keep this value to be used later.
- `<-` is the assignment operator to assign the value to the object.
    - You can also use `=`, but generally in R, `<-` is the convention.
    - Keyboard shortcut: `Alt` + `-` in Windows (`Option` + `-` in Mac)

[Previous data types explanation remains the same]

## Data Types in R

The four basic data types are characters, numeric, boolean, and integer. Let's look at examples using our WVS survey variables:

```{r}
#| echo: true
#| code-line-numbers: "|1|2|3|4"

country_code <- "SGP" # Character
life_satisfaction <- 8.5 # Numeric (also sometimes called Double)
is_religious <- TRUE # Boolean/Logical (true/false)
birth_year <- 1990L # Integer (whole numbers)
```

## Checking data type of a variable

You can use `str` or `typeof` to check the data type of an R object.

```{r}
#| echo: true
typeof(country_code)
```

```{r}
#| echo: true
str(is_religious) 
```

## Arithmetic operations in R

You can do arithmetic operations in R. For example, let's calculate average satisfaction scores:

```{r}
#| echo: true
(8 + 7 + 9) / 3  # Average of three satisfaction scores
```

```{r}
#| echo: true
2025 - 1990  # Calculate age from birth year
```

## Boolean operations in R

Boolean operations in R are useful for filtering survey data:

**AND** operations (both conditions must be TRUE)

```r
# Check if someone is both highly satisfied (>8) AND from Singapore
(life_satisfaction > 8) & (country_code == "SGP")
```

**OR** operations (at least one condition must be TRUE)

```r
# Check if someone is either married OR living together as married
marital_status == "Married" | marital_status == "Living together as married"
```

## Functions in R

Functions take inputs (arguments/parameters), process them, and return a result. For example, calculating the mean satisfaction score:

```{r}
#| echo: true
satisfaction_scores <- c(7.5, 8.0, 6.5, 9.0)
round(mean(satisfaction_scores), digits = 1)
```

Saving the result to an object:

```{r}
#| echo: true
avg_satisfaction = round(mean(satisfaction_scores), digits = 1)
print(avg_satisfaction)
```

[Previous package installation instructions remain the same]

## Data Structures in R: Vectors

Vectors can store multiple values. Let's create vectors using our survey data:

```{r}
#| echo: true
countries <- c("CAN", "NZL", "SGP", "CAN", "SGP")
satisfaction_scores <- c(8, 7, 9, 6, 8)
employment_status <- c("Full time", "Student", "Part time", "Retired", "Full time")
```

## Vector Manipulations: Retrieve and update items

```{r}
#| echo: true
# retrieve the first country in the vector
countries[1]

# retrieves the first three satisfaction scores
satisfaction_scores[1:3]

# update the first satisfaction score
satisfaction_scores[1] <- 7
print(satisfaction_scores)
```

## Vector Manipulations: Retrieve items based on criteria

Let's find high satisfaction scores (above 7):

```{r}
#| echo: true
# Create boolean vector for our condition
high_satisfaction <- satisfaction_scores > 7
print(high_satisfaction)

# Use the boolean vector to filter satisfaction scores
satisfaction_scores[high_satisfaction]
```

## Vector Manipulations: Handling NA values

Survey data often contains missing values (NA):

```{r}
#| echo: true
financial_satisfaction <- c(8, 7, NA, 6, 9, NA, 7)

# By default, mean() will return NA if there are any NA values
mean(financial_satisfaction)

# Remove NA values before calculating mean
mean(financial_satisfaction, na.rm = TRUE)
```

## Data Structures in R: Factors

Factors are perfect for categorical survey variables:

Unordered (Nominal):

```{r}
#| echo: true 
employment_factor <- factor(c("Full time", "Part time", "Student", "Retired", "Student"))
str(employment_factor)
```

Ordered (Ordinal):

```{r}
#| echo: true 
importance_factor <- factor(
    c("Very important", "Important", "Not very important", "Not at all important"),
    ordered = TRUE,
    levels = c("Not at all important", "Not very important", "Important", "Very important")
)
str(importance_factor)
```

## Data Structures in R: Dataframe

Create a small dataframe with survey responses:

```{r}
#| echo: true
survey_data <- data.frame(
    country = c("SGP", "CAN", "NZL", "SGP", "CAN"),
    life_satisfaction = c(8, 7, 9, 6, 8),
    employment = c("Full time", "Student", "Part time", "Retired", "Full time")
)
print(survey_data)
```

## Loading the WVS Dataset

Let's load our actual World Values Survey dataset:

```{r}
#| echo: true
#| output: false
library(tidyverse)

wvs_data <- read_csv("data/wvs-wave7-sg-ca-nz.csv") # Make sure to save the WVS data in your data folder
head(wvs_data)
```

## Exploring the WVS Dataset

```{r}
#| echo: true
#| output: false
#| eval: false

dim(wvs_data) # Check dimensions (7061 rows, 16 columns)
names(wvs_data) # View all variable names
str(wvs_data) # Check structure and data types
summary(wvs_data) # Get summary statistics
```

# End of Session 1!

Next Session: Data wrangling with `dplyr` and `tidyr` packages - we'll learn how to:
- Filter survey responses by country
- Calculate average satisfaction scores by demographic groups
- Create new variables from existing ones
- Handle missing values in survey data
- And much more!